// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../../routes/__root'
import { Route as IndexRouteImport } from './../../routes/index'
import { Route as SimulateScanIndexRouteImport } from './../../routes/simulate-scan/index'
import { Route as SetupWizardIndexRouteImport } from './../../routes/setup-wizard/index'
import { Route as ProjectsIndexRouteImport } from './../../routes/projects/index'
import { Route as NotificationsIndexRouteImport } from './../../routes/notifications/index'
import { Route as KeysIndexRouteImport } from './../../routes/keys/index'
import { Route as DashboardIndexRouteImport } from './../../routes/dashboard/index'
import { Route as ContentIndexRouteImport } from './../../routes/content/index'
import { Route as AdminRoleManagerIndexRouteImport } from './../../routes/admin/role-manager/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SimulateScanIndexRoute = SimulateScanIndexRouteImport.update({
  id: '/simulate-scan/',
  path: '/simulate-scan/',
  getParentRoute: () => rootRouteImport,
} as any)
const SetupWizardIndexRoute = SetupWizardIndexRouteImport.update({
  id: '/setup-wizard/',
  path: '/setup-wizard/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsIndexRoute = NotificationsIndexRouteImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRouteImport,
} as any)
const KeysIndexRoute = KeysIndexRouteImport.update({
  id: '/keys/',
  path: '/keys/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentIndexRoute = ContentIndexRouteImport.update({
  id: '/content/',
  path: '/content/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoleManagerIndexRoute = AdminRoleManagerIndexRouteImport.update({
  id: '/admin/role-manager/',
  path: '/admin/role-manager/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/content': typeof ContentIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/keys': typeof KeysIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/setup-wizard': typeof SetupWizardIndexRoute
  '/simulate-scan': typeof SimulateScanIndexRoute
  '/admin/role-manager': typeof AdminRoleManagerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/content': typeof ContentIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/keys': typeof KeysIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/setup-wizard': typeof SetupWizardIndexRoute
  '/simulate-scan': typeof SimulateScanIndexRoute
  '/admin/role-manager': typeof AdminRoleManagerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/content/': typeof ContentIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/keys/': typeof KeysIndexRoute
  '/notifications/': typeof NotificationsIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/setup-wizard/': typeof SetupWizardIndexRoute
  '/simulate-scan/': typeof SimulateScanIndexRoute
  '/admin/role-manager/': typeof AdminRoleManagerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/content'
    | '/dashboard'
    | '/keys'
    | '/notifications'
    | '/projects'
    | '/setup-wizard'
    | '/simulate-scan'
    | '/admin/role-manager'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/content'
    | '/dashboard'
    | '/keys'
    | '/notifications'
    | '/projects'
    | '/setup-wizard'
    | '/simulate-scan'
    | '/admin/role-manager'
  id:
    | '__root__'
    | '/'
    | '/content/'
    | '/dashboard/'
    | '/keys/'
    | '/notifications/'
    | '/projects/'
    | '/setup-wizard/'
    | '/simulate-scan/'
    | '/admin/role-manager/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContentIndexRoute: typeof ContentIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  KeysIndexRoute: typeof KeysIndexRoute
  NotificationsIndexRoute: typeof NotificationsIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  SetupWizardIndexRoute: typeof SetupWizardIndexRoute
  SimulateScanIndexRoute: typeof SimulateScanIndexRoute
  AdminRoleManagerIndexRoute: typeof AdminRoleManagerIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/simulate-scan/': {
      id: '/simulate-scan/'
      path: '/simulate-scan'
      fullPath: '/simulate-scan'
      preLoaderRoute: typeof SimulateScanIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setup-wizard/': {
      id: '/setup-wizard/'
      path: '/setup-wizard'
      fullPath: '/setup-wizard'
      preLoaderRoute: typeof SetupWizardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keys/': {
      id: '/keys/'
      path: '/keys'
      fullPath: '/keys'
      preLoaderRoute: typeof KeysIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/': {
      id: '/content/'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/role-manager/': {
      id: '/admin/role-manager/'
      path: '/admin/role-manager'
      fullPath: '/admin/role-manager'
      preLoaderRoute: typeof AdminRoleManagerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContentIndexRoute: ContentIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  KeysIndexRoute: KeysIndexRoute,
  NotificationsIndexRoute: NotificationsIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  SetupWizardIndexRoute: SetupWizardIndexRoute,
  SimulateScanIndexRoute: SimulateScanIndexRoute,
  AdminRoleManagerIndexRoute: AdminRoleManagerIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
